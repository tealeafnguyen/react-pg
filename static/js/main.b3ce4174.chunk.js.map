{"version":3,"sources":["components/Clickable/Clickable.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Clickable","props","react_default","a","createElement","onClick","clicked","id","className","alt","src","image","Header","score","reset","App","state","clickables","size","length","_this","shuffle","forceUpdate","lose","i","toString","push","win","j","x","Math","floor","random","alert","this","_this2","components_Header_Header","map","stuff","components_Clickable_Clickable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kyCAYeA,SARG,SAAAC,GAAK,OACnBC,EAAAC,EAAAC,cAAA,QAAMC,QAAS,kBAAMJ,EAAMK,QAAQL,EAAMM,KAAKC,UAAU,SACpDN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACXN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMM,GAAIG,IAAKT,EAAMU,YCM5BC,eATA,SAAAX,GAAK,OAChBC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACXN,EAAAC,EAAAC,cAAA,mBAAWH,EAAMY,OACjBX,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMJ,EAAMa,UAA7B,oBCiFGC,6MAjFbC,MAAQ,CACNV,QAAS,GACTW,aACAJ,MAAO,EACPK,KAAMD,EAAWE,UAGnBL,MAAQ,WACNM,EAAKJ,MAAMH,MAAQ,EACnBO,EAAKJ,MAAMV,QAAU,GACrBc,EAAKJ,MAAMC,WAAaG,EAAKC,QAAQD,EAAKJ,MAAMC,YAChDG,EAAKE,iBAwBPhB,QAAU,SAAAC,GAER,IADA,IAAIgB,GAAO,EACFC,EAAI,EAAGA,EAAIJ,EAAKJ,MAAMV,QAAQa,OAAQK,IACzCJ,EAAKJ,MAAMV,QAAQkB,IAAMjB,EAAGkB,aAE9BF,GAAO,EACPH,EAAKG,QAIG,GAARA,IACFH,EAAKJ,MAAMV,QAAQoB,KAAKnB,EAAGkB,YAC3BL,EAAKJ,MAAMC,WAAaG,EAAKC,QAAQD,EAAKJ,MAAMC,YAChDG,EAAKJ,MAAMH,QACXO,EAAKE,cACFF,EAAKJ,MAAMH,OAASO,EAAKJ,MAAME,MAChCE,EAAKO,+EArCHxB,GACN,IAAIyB,EAAGC,EAAGL,EACV,IAAKA,EAAIrB,EAAEgB,OAAS,EAAGK,EAAI,EAAGA,IAC5BI,EAAIE,KAAKC,MAAMD,KAAKE,UAAYR,EAAI,IACpCK,EAAI1B,EAAEqB,GACNrB,EAAEqB,GAAKrB,EAAEyB,GACTzB,EAAEyB,GAAKC,EAET,OAAO1B,iCAIP8B,MAAM,YACNC,KAAKpB,sCAILmB,MAAM,WACNC,KAAKpB,yCAwBE,IAAAqB,EAAAD,KACP,OACEhC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACgC,EAAD,CACEvB,MAAOqB,KAAKlB,MAAMH,MAClBC,MAAOoB,KAAKpB,QAEdZ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACZ0B,KAAKlB,MAAMC,WAAWoB,IAAI,SAAAC,GACzB,OACEpC,EAAAC,EAAAC,cAACmC,EAAD,CACEhC,GAAI+B,EAAM/B,GACVI,MAAO2B,EAAM3B,MACbL,QAAS6B,EAAK7B,sBAxEdkC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b3ce4174.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Clickable.css\";\r\n\r\n\r\nconst Clickable = props => (\r\n    <span onClick={() => props.clicked(props.id)} className=\"click\">\r\n        <div className=\"card\">\r\n            <img alt={props.id} src={props.image} />\r\n        </div>\r\n    </span>\r\n);\r\n\r\nexport default Clickable;","import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\n\r\nconst Header = props => (\r\n    <center>\r\n        <div className=\"headerBar\">\r\n            <p>Score: {props.score}</p>\r\n            <button onClick={() => props.reset()}>Reset</button>\r\n        </div>\r\n    </center>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Clickable from \"./components/Clickable\"\nimport './App.css';\nimport Header from \"./components/Header\"\nimport clickables from \"./cards.json\"\n\nclass App extends Component {\n\n  state = {\n    clicked: [],\n    clickables,\n    score: 0,\n    size: clickables.length\n  }\n\n  reset = () => {\n    this.state.score = 0\n    this.state.clicked = [];\n    this.state.clickables = this.shuffle(this.state.clickables);\n    this.forceUpdate();\n  }\n\n  shuffle(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  lose() {\n    alert('You lose');\n    this.reset();\n  }\n\n  win() {\n    alert('You Win');\n    this.reset();\n  }\n\n  clicked = id => {\n    var lose = false;\n    for (var i = 0; i < this.state.clicked.length; i++) {\n      if (this.state.clicked[i] == id.toString()) {\n        //if clicked id exists\n        lose = true;\n        this.lose();\n      }\n    }\n\n    if (lose == false) {\n      this.state.clicked.push(id.toString());\n      this.state.clickables = this.shuffle(this.state.clickables);\n      this.state.score++;\n      this.forceUpdate();\n      if(this.state.score == this.state.size){\n        this.win();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          score={this.state.score}\n          reset={this.reset}\n        />\n        <center>\n          <div className='playArea'>\n            {this.state.clickables.map(stuff => {\n              return (\n                <Clickable\n                  id={stuff.id}\n                  image={stuff.image}\n                  clicked={this.clicked}\n                />\n              );\n            })}\n          </div>\n        </center>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}